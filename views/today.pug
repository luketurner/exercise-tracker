extends _layout.pug

block content
  div(x-data="{creatingNewSet: false, date: "+date+", user: "+JSON.stringify(user)+", allParameters: "+JSON.stringify(allParameters)+"}")
    div.field.has-addons.has-addons-centered.mb-5
      div.control
        a.button.is-large(href="/"+yesterday)
          span.icon
            +icon("chevron-left")
      div.control
        input.input.is-large#date(type="date", name="date", value=date, max=today, x-on:change="window.location.pathname = `/${$event.target.value}`", x-bind:style="'color-scheme: '+theme")
      if !isToday
        div.control
          a.button.is-large(href="/"+tomorrow)
            span.icon
              +icon("chevron-right")
    if exercises.length === 0
      .notification.is-primary.is-light.content(x-data="{ onboardingNotification: true }", x-show="onboardingNotification")
        button.delete(x-on:click="onboardingNotification = false")
        p Hi, welcome to Set! This is an app that helps you track exercises, but it looks like you don't have any exercises to track yet.

        p
          | The first step is to open the 
          a(href="/exercises") Manage Exercises page
          |  and create the exercises that you want to track.
          | Then, when you want to track your exercises, come back to the Today page (the one you're currently on) to log your sets.

    div.set-list#set-list(x-data=JSON.stringify({exercises, historicalSets }))
      each set in sets
        template(x-if="!isDeleted", x-data="{ isDeleted: false, hasHistorical: false, historyExpanded: false, set: "+JSON.stringify({ ...set, exercise: set.exercise.id })+"}")
          .is-flex.is-flex-direction-row(data-id=set.id, x-effect="historyExpanded = !set.exercise; hasHistorical = historicalSets[set.exercise]?.length;")
            form(action="/sets/"+set.id+"/delete", method="POST", id="set-"+set.id+"-delete")
            .is-flex.is-flex-direction-column.is-flex-grow-1
              div.fixed-grid.has-7-cols-desktop.has-4-cols-tablet.has-2-cols-mobile.set-grid
                div.grid(x-data=`{
                  parameters: {},
                }`, x-effect=`
                  parameters = exercises.find(v => v.id == set.exercise).parameters.reduce((m, parameter) => {
                    const v = set.parameters[parameter.id];
                    if (parameter.dataType === 'duration') {
                      m[parameter.id] = {
                        minutes: (v && v.minutes)?.toString() || "",
                        seconds: (v && v.seconds)?.toString() || "",
                        hours: (v && v.hours)?.toString() || ""
                      };
                      return m;
                    }
                    var value = _set.getRawValue(v, parameter, user);
                    if (value != undefined) {
                      m[parameter.id] = value.toString()
                    }
                    return m;
                  }, {})
                `)
                  .cell.is-col-span-2
                    .field.has-addons
                      .control.is-expanded
                        +selectAlpine(
                          "set.exercise",
                          "$fetch('post', '/sets/'+set.id, { exercise: set.exercise, parameters, })",
                          exercises
                        )(class="is-fullwidth is-primary")
                      template(x-if="hasHistorical")
                        .control
                          button.button.is-primary(x-on:click="historyExpanded = !historyExpanded", x-bind:class="theme === 'dark' ? 'is-dark' : 'is-light'")
                            span.icon
                              +icon("chart-line")
                      .control
                        button.button.is-danger(x-on:click="isDeleted = true; $fetch('delete', '/sets/'+set.id)", x-bind:class="theme === 'dark' ? 'is-dark' : 'is-light'")
                          span.icon
                            +icon("x")(class="is-medium")
                  each parameter in allParameters
                    - var paramValue = set.parameters[parameter.id]
                    div.cell(
                      x-show="!!exercises.find(v => v.id == set.exercise)?.parameters?.find(p => p.id === '"+parameter.id+"')"
                    )
                      if parameter.dataType === 'duration'
                        template(x-if="!!exercises.find(v => v.id == set.exercise)?.parameters?.find(p => p.id === '"+parameter.id+"')")
                          .field.has-addons.duration-field
                            .control.has-icons-left
                              input.input(
                                id=parameter.id + "-min",
                                type="number",
                                name=parameter.id + "-min",
                                x-model="parameters['"+parameter.id+"'].minutes"
                                x-on:input.debounce.500ms="$fetch('post', '/sets/"+set.id+"', { ...set, parameters, })"
                              )
                              span.icon.is-small.is-left
                                +icon('duration')
                            .control
                              input.input(
                                id=parameter.id + "-sec",
                                type="number",
                                name=parameter.id + "-sec",
                                x-model="parameters['"+parameter.id+"'].seconds"
                                x-on:input.debounce.500ms="$fetch('post', '/sets/"+set.id+"', { ...set, parameters, })"
                              )
                      else
                        +control(
                          parameter.id,
                          parameter.dataType === 'weight' || parameter.dataType === 'distance' ? defaultUnit(parameter.dataType, user) : parameter.dataType === 'duration' ? 'min' : parameter.id === 'reps' ? 'reps' : null,
                        )
                          if parameter.dataType === 'weight' || parameter.dataType === 'distance'
                            - var unit = defaultUnit(parameter.dataType, user)
                            input.input(
                              id=parameter.id,
                              type="number",
                              name=parameter.id,
                              min="0", step="0.1"
                              x-model="parameters['"+parameter.id+"']"
                              x-on:input.debounce.500ms="$fetch('post', '/sets/"+set.id+"', { ...set, parameters, })"
                            )
                          else if parameter.dataType === 'intensity'
                            +selectAlpine(
                              "parameters['"+parameter.id+"']",
                              "$fetch('post', '/sets/"+set.id+"', { ...set, parameters, })",
                              [{ id: "", name: "" }].concat(allIntensities)
                            )(class="is-fullwidth")
                          else
                            input.input(
                              id=parameter.id,
                              type="number",
                              name=parameter.id,
                              x-model="parameters['"+parameter.id+"']"
                              x-on:input.debounce.500ms="$fetch('post', '/sets/"+set.id+"', { ...set, parameters, })"
                            )
              template(x-if="hasHistorical && historyExpanded")
                div
                  p
                    span(x-text="historicalSets[set.exercise][0].date")
                    a.ml-2(x-bind:href="`/exercises/${set.exercise}/historical?back=/${date}`") (See all)
                  table.table
                    thead
                      each parameter in allParameters
                        th(x-show="!!exercises.find(v => v.id == set.exercise)?.parameters?.find(p => p.id === '"+parameter.id+"')")
                          +icon(parameter.id)
                    tbody
                      template(x-for="historicalSet in historicalSets[set.exercise]")
                        tr
                          template(x-for="parameter in allParameters")
                            td(
                              x-show="!!exercises.find(v => v.id == set.exercise)?.parameters?.find(p => p.id === parameter.id)"
                              x-text="_set.displayStringForTable(historicalSet.parameters[parameter.id], parameter, user)"
                            )
      template(x-if="creatingNewSet")
        .is-flex.is-flex-direction-row
          .is-flex.is-flex-direction-column.is-flex-grow-1
            div.fixed-grid.has-7-cols-desktop.has-4-cols-tablet.has-2-cols-mobile.set-grid
              div.grid
                .cell.is-col-span-7.skeleton-block.set-skeleton
    script
      | _set.makeSortableSetList("set-list") 
    if exercises.length !== 0
      .box.primary-box
        .field(x-data="{ newSetExercise: null }")
          label.label Add new set
          +control()
            +selectAlpine(
              "newSetExercise",
              "if (newSetExercise) { creatingNewSet = true; $fetch('post', '/sets', {exercise: newSetExercise, date: '"+date+"', order: '"+nextSetOrder+"'}).then(() => window.location.reload()) }",
              [{ id: "", name: "" }].concat(exercises),
              "creatingNewSet"
            )(class="is-primary is-fullwidth")
